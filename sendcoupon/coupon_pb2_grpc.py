# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import grpctest.sendcoupon.coupon_pb2 as coupon__pb2


class couponStub(object):
  """
  //消费使用券
  message UseC2URequest {
  int64 bid = 1;
  int64 uid = 2;
  int64 sid = 3;
  int64 transId = 4;
  repeated int64 c2uIds = 5;
  string tradeType = 6;

  }

  message UseC2UReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  //撤销发送券
  message CancelSendC2UByTradeRequest {
  int64 bid = 1;
  int64 uid = 2;
  int64 sid = 3;
  int64 transId = 4;
  string delType = 5;
  int64 couponsNum = 6;
  int64  sourceType = 7; 
  int64 repealTcId = 8;

  }

  message CancelSendC2UByTradeReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  //合并用户的券帐户
  message MergeCouponAccountRequest {
  int64 bid = 1; 
  int64 fromUid = 2;
  int64 toUid = 3;
  int64 mid = 4;
  }

  message MergeCouponAccountReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  int32 result = 3;
  }   

  message RedisC2USelectRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string fields = 3;
  string conditions = 4;  
  }

  message RedisC2USelectReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  message RedisC2UUpdateRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string data = 3;
  string conditions = 4;  
  }

  message RedisC2UUpdateReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  message RedisC2URemoveRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string conditions = 3;
  }

  message RedisC2URemoveReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  //添加数据
  message RedisC2UAddRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string data = 3;
  string conditions = 4;  
  }

  message RedisC2UAddReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  //券模板redis获取
  message RedisSelectCouponRequest {
  int64 bid = 1;
  string fields = 2;
  string conditions = 3;
  }

  message RedisSelectCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  message RedisUpdateCouponRequest {
  int64 bid = 1;
  string data = 2;
  string conditions = 3;  
  }

  message RedisUpdateCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  message RedisRemoveCouponRequest {
  int64 bid = 1;
  string conditions = 2;
  }

  message RedisRemoveCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  //添加数据
  message RedisAddCouponRequest {
  int64 bid = 1;
  string data = 2;
  string conditions = 3;  
  }

  message RedisAddCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendCoupon = channel.unary_unary(
        '/coupon.coupon/SendCoupon',
        request_serializer=coupon__pb2.SendCouponRequest.SerializeToString,
        response_deserializer=coupon__pb2.BoolReply.FromString,
        )


class couponServicer(object):
  """
  //消费使用券
  message UseC2URequest {
  int64 bid = 1;
  int64 uid = 2;
  int64 sid = 3;
  int64 transId = 4;
  repeated int64 c2uIds = 5;
  string tradeType = 6;

  }

  message UseC2UReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  //撤销发送券
  message CancelSendC2UByTradeRequest {
  int64 bid = 1;
  int64 uid = 2;
  int64 sid = 3;
  int64 transId = 4;
  string delType = 5;
  int64 couponsNum = 6;
  int64  sourceType = 7; 
  int64 repealTcId = 8;

  }

  message CancelSendC2UByTradeReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  //合并用户的券帐户
  message MergeCouponAccountRequest {
  int64 bid = 1; 
  int64 fromUid = 2;
  int64 toUid = 3;
  int64 mid = 4;
  }

  message MergeCouponAccountReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  int32 result = 3;
  }   

  message RedisC2USelectRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string fields = 3;
  string conditions = 4;  
  }

  message RedisC2USelectReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  message RedisC2UUpdateRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string data = 3;
  string conditions = 4;  
  }

  message RedisC2UUpdateReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  message RedisC2URemoveRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string conditions = 3;
  }

  message RedisC2URemoveReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  //添加数据
  message RedisC2UAddRequest {
  int64 bid = 1;
  string c2uKey = 2;
  string data = 3;
  string conditions = 4;  
  }

  message RedisC2UAddReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  //券模板redis获取
  message RedisSelectCouponRequest {
  int64 bid = 1;
  string fields = 2;
  string conditions = 3;
  }

  message RedisSelectCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  string result = 3;
  }

  message RedisUpdateCouponRequest {
  int64 bid = 1;
  string data = 2;
  string conditions = 3;  
  }

  message RedisUpdateCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  message RedisRemoveCouponRequest {
  int64 bid = 1;
  string conditions = 2;
  }

  message RedisRemoveCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  //添加数据
  message RedisAddCouponRequest {
  int64 bid = 1;
  string data = 2;
  string conditions = 3;  
  }

  message RedisAddCouponReply {
  int64 errCode = 1; //0值表示调用接口成功
  string errMsg = 2;
  bool result = 3;
  }

  """

  def SendCoupon(self, request, context):
    """
    // 撤销消费使用券
    rpc UnsetUseC2U (UnsetUseC2URequest) returns (UnsetUseC2UReply) {}

    // 检查发送的券是否可撤销
    rpc CheckCancelSendC2UByTrade(CheckCancelSendC2UByTradeRequest) returns (CheckCancelSendC2UByTradeReply) {}

    // 查询当前用户所有的优惠券列表(相同券需要合并)
    rpc ListC2U (ListC2URequest) returns (ListC2UReply) {}

    // 查询当前用户所有可用的优惠券列表
    rpc ListC2UCanUse (ListC2UCanUseRequest) returns (ListC2UCanUseReply) {}

    // 通过c2uIds 拉取用户账户信息
    rpc ListC2UByC2UIds(ListC2UByC2UIdsRequest) returns (ListC2UByC2UIdsReply) {}

    // 检查交易发送的券是否可撤销
    rpc CheckCancelSendC2UByConsumeTrade (CheckCancelSendC2UByConsumeTradeRequest) returns (CheckCancelSendC2UByConsumeTradeReply) {}

    // 检查发送的券是否可撤销
    rpc CheckCancelSendC2UByTradeMulti (CheckCancelSendC2UByTradeMultiRequest) returns (CheckCancelSendC2UByTradeMultiReply) {}

    // 从指定用户账户中收回指定券 - 已使用的券无法被收回，将自动跳过
    rpc RecoverCouponsByC2uIds (RecoverCouponsByC2uIdsRequest) returns (RecoverCouponsByC2uIdsReply) {}

    // 更新券账户信息
    rpc UpdateC2U (UpdateC2URequest) returns (UpdateC2UReply) {}

    // 添加券账户信息
    rpc AddC2U (AddC2URequest) returns (AddC2UReply) {}

    // 删除券账户
    rpc DeleteC2U (DeleteC2URequest) returns (DeleteC2UReply) {}

    // 根据条件获取券账户
    rpc ListC2UByConditions (ListC2UByConditionsRequest) returns (ListC2UByConditionsReply) {}

    // 根据条件获取券账户 从mysql 直接获取
    rpc ListC2UByMySQL (ListC2UByMySQLRequest) returns (ListC2UByMySQLReply) {}

    // 查询当前用户所有未来可用的优惠券列表 
    rpc ListC2UFutureCanUse (ListC2UFutureCanUseRequest) returns (ListC2UFutureCanUseReply) {}

    // 查询当前用户所有未来可用的优惠券列表
    rpc ListC2UFutureCanUseForPos (ListC2UFutureCanUseForPosRequest) returns (ListC2UFutureCanUseForPosReply) {}

    // 软pos消费页面Pos_ConsumeController的indexAction调用的方法
    rpc GetC2uForPosConsume (GetC2uForPosConsumeRequest) returns (GetC2uForPosConsumeReply) {}

    // 用户领取卡券
    rpc UserGetCoupon (UserGetCouponRequest) returns (UserGetCouponReply) {}

    // 查看券包有没有发完
    rpc IsCouponSendComplate(IsCouponSendComplateRequest) returns (IsCouponSendComplateReply) {}
    // 查询当前用户所有可用的优惠券搜索
    rpc UserCanUseConditions (UserCanUseConditionsRequest) returns (UserCanUseConditionsReply) {}
    //userOverCoupon
    rpc UserOverCoupon (UserOverCouponRequest) returns (UserOverCouponReply) {}

    //coupon:更新券模板
    rpc UpdateCoupon (UpdateCouponRequest) returns (UpdateCouponReply) {}

    //coupon:删除券模板
    rpc DeleteCoupon (DeleteCouponRequest) returns (DeleteCouponReply) {}

    //coupon:根据条件获取
    rpc ListAllCouponByConditions(ListAllCouponByConditionsRequest) returns (ListAllCouponByConditionsReply) {}

    //coupon: 统计优惠券数量
    rpc CountCouponNums (CountCouponNumsRequest) returns (CountCouponNumsReply) {}

    //coupon:券被活动引用(优惠券cAids字段增加该活动aid) 支持券包，如果是券包，将券包下的子券也标记为引用
    rpc CouponQuoteByActivity(CouponQuoteByActivityRequest) returns(CouponQuoteByActivityReply) {}
    //coupon:券被活动取消引用 支持券包，如果是券包，将券包下的子券也取消引用
    rpc CouponUnquoteByActivity(CouponUnquoteByActivityRequest) returns(CouponUnquoteByActivityReply) {}

    //coupon: 根据couponIds获取券
    rpc ListCouponsByCouponIds (ListCouponsByCouponIdsRequest) returns (ListCouponsByCouponIdsReply) {}

    //coupon:useMassCoupon
    rpc UseMassCoupon (UseMassCouponRequest) returns (UseMassCouponReply) {}

    //coupon: 创建卡包
    rpc AddPack(AddPackRequest) returns (AddPackReply) {}

    //coupon: 更新卡包
    rpc UpdatePack (UpdatePackRequest) returns (UpdatePackReply) {}

    //coupon:检查子券
    rpc CheckSubCoupons (checkSubCouponsRequest) returns (checkSubCouponsReply) {}

    //coupon:删除卡包
    rpc DeletePack (DeletePackRequest) returns (DeletePackReply) {}

    //coupon:刷新券包下的券
    rpc PackRefreshSubCoupons (PackRefreshSubCouponsRequest) returns (PackRefreshSubCouponsReply) {}

    //coupon:根据条件获取
    rpc ListCouponByConditions (ListCouponByConditionsRequest) returns (ListCouponByConditionsReply) {}

    SendCoupon : 发券

    //UseC2U 消费使用券
    rpc UseC2U (UseC2URequest) returns (UseC2UReply) {}

    //CancelSendC2UByTrade 撤销发送券
    rpc CancelSendC2UByTrade (CancelSendC2UByTradeRequest) returns (CancelSendC2UByTradeReply) {}

    //合并用户的券帐户
    rpc MergeCouponAccount (MergeCouponAccountRequest) returns (MergeCouponAccountReply) {}

    //redis添加券账户
    rpc RedisC2UAdd(RedisC2UAddRequest) returns (RedisC2UAddReply) {}

    //redis查询券账户
    rpc RedisC2USelect(RedisC2USelectRequest) returns (RedisC2USelectReply) {}

    	//redis更新券账户
    rpc RedisC2UUpdate(RedisC2UUpdateRequest) returns (RedisC2UUpdateReply) {}

    	//redis删除券账户
    rpc RedisC2URemove(RedisC2URemoveRequest) returns (RedisC2URemoveReply) {}

    // 根据状态查询当前用户的优惠券列表
    rpc ListC2UCurrentCoupons(ListC2UCurrentCouponsRequest) returns (ListC2UCurrentCouponsReply) {}

    //券模板获取
    rpc RedisSelectCoupon(RedisSelectCouponRequest) returns (RedisSelectCouponReply) {}

    //券模板更新
    rpc RedisUpdateCoupon(RedisUpdateCouponRequest) returns (RedisUpdateCouponReply) {}

    //券模板删除
    rpc RedisRemoveCoupon(RedisRemoveCouponRequest) returns (RedisRemoveCouponReply) {}

    //券模板添加
    rpc RedisAddCoupon(RedisAddCouponRequest) returns (RedisAddCouponReply) {}


    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_couponServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendCoupon': grpc.unary_unary_rpc_method_handler(
          servicer.SendCoupon,
          request_deserializer=coupon__pb2.SendCouponRequest.FromString,
          response_serializer=coupon__pb2.BoolReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'coupon.coupon', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
